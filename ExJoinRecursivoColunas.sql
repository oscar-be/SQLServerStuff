

DROP TABLE IF EXISTS DBO.TMP_TESTE_RECURSIVO


SELECT ID_FUNC = CONVERT(INT, NULL), NOME_FUNC = CONVERT(VARCHAR(MAX), NULL), ID_CHEFE = CONVERT(INT, NULL)
	INTO DBO.TMP_TESTE_RECURSIVO


INSERT INTO DBO.TMP_TESTE_RECURSIVO VALUES 
	(1, 'JOAO', NULL), (2, 'ANTONIO AVELAR', 1), (3, 'MARIA CELUTA', 2), (4, 'SEU MADRUGA', 2), (5, 'RODRIGO GOIABA', 1), (6, 'MARIETA', 4)

DELETE FROM DBO.TMP_TESTE_RECURSIVO WHERE ID_FUNC IS NULL

/*
--Forma 1: Errada
SELECT DISTINCT 
		A.ID_FUNC, A.NOME_FUNC
	   ,ID_CHEFE1 = B.ID_FUNC, NOME_CHEFE1 = B.NOME_FUNC
	   ,ID_CHEFE2 = C.ID_FUNC, NOME_CHEFE2 = C.NOME_FUNC 
	FROM DBO.TMP_TESTE_RECURSIVO A
	LEFT JOIN DBO.TMP_TESTE_RECURSIVO B ON A.ID_FUNC = B.ID_CHEFE
	LEFT JOIN DBO.TMP_TESTE_RECURSIVO C ON B.ID_FUNC = C.ID_CHEFE

--Forma 2: Certa
SELECT DISTINCT 
		A.ID_FUNC, A.NOME_FUNC
	   ,ID_CHEFE1 = B1.ID_FUNC, NOME_CHEFE1 = B1.NOME_FUNC
	   ,ID_CHEFE2 = B2.ID_FUNC, NOME_CHEFE2 = B2.NOME_FUNC 
	FROM DBO.TMP_TESTE_RECURSIVO A
	LEFT JOIN DBO.TMP_TESTE_RECURSIVO B1 ON B1.ID_FUNC = A.ID_CHEFE
	LEFT JOIN DBO.TMP_TESTE_RECURSIVO B2 ON B2.ID_FUNC = B1.ID_CHEFE
*/

--
--
DECLARE  @QUERY VARCHAR(MAX) = ''
		,@QUERY_FINAL VARCHAR(MAX) = ''
		,@CONTADOR INT = 1	
		,@CAMPOS_QUERY_TABELA VARCHAR(MAX) = ''
		,@JOINS_QUERY_TABELA VARCHAR(MAX) = ''
		,@CONDICAO_QUERY VARCHAR(MAX) = ''
		,@CONDICAO_QUERY_ANTERIOR VARCHAR(MAX) = ''
		
	
	DECLARE @QUERYDYNAMIC NVARCHAR(MAX)
			,@DYNAMICPARAMDEC AS NVARCHAR(MAX)
			,@RETORNO AS VARCHAR(MAX)		
		

SET @JOINS_QUERY_TABELA = 'LEFT JOIN DBO.TMP_TESTE_RECURSIVO B' + CONVERT(VARCHAR(4), @CONTADOR) 
SET @JOINS_QUERY_TABELA = @JOINS_QUERY_TABELA + ' ON A.ID_CHEFE = B' + CONVERT(VARCHAR(4), @CONTADOR) + '.ID_FUNC'

SET @CAMPOS_QUERY_TABELA = ',ID_CHEFE1 = B' + CONVERT(VARCHAR(4), @CONTADOR)+ '.ID_FUNC' 
SET @CAMPOS_QUERY_TABELA = @CAMPOS_QUERY_TABELA + ', NOME_CHEFE1 = B' + CONVERT(VARCHAR(4), @CONTADOR) + '.NOME_FUNC' + CHAR(13)



SET @CONDICAO_QUERY = 'WHERE B' + CONVERT(VARCHAR(4), @CONTADOR) + '.ID_FUNC IS NOT NULL'

SET @QUERY = 'SELECT DISTINCT A.ID_FUNC, A.NOME_FUNC' + CHAR(13)
SET @QUERY = @QUERY + @CAMPOS_QUERY_TABELA 
SET @QUERY = @QUERY + 'FROM DBO.TMP_TESTE_RECURSIVO A' + CHAR(13)
SET @QUERY = @QUERY + @JOINS_QUERY_TABELA + CHAR(13)

SET @QUERY_FINAL = @QUERY 
SET @QUERY = @QUERY + @CONDICAO_QUERY

--SQL Dinâmico para identificar se o join retorna algo
SET @QUERYDYNAMIC = 'SELECT @RETORNO = CASE WHEN EXISTS (' + @QUERY + ') THEN 1 ELSE 0 END' + CHAR(13)	
SET @DYNAMICPARAMDEC = '@RETORNO VARCHAR(MAX) OUTPUT'		

--PRINT @QUERY	
EXECUTE SP_EXECUTESQL
		@QUERYDYNAMIC  
		,@DYNAMICPARAMDEC
		,@RETORNO  OUTPUT


WHILE @RETORNO = 1
BEGIN
	SET @CONTADOR += 1

	SET @CAMPOS_QUERY_TABELA = ',ID_CHEFE' + CONVERT(VARCHAR(4), @CONTADOR) + ' = B' + CONVERT(VARCHAR(4), @CONTADOR)+ '.ID_FUNC' 
	SET @CAMPOS_QUERY_TABELA = @CAMPOS_QUERY_TABELA + ', NOME_CHEFE' + CONVERT(VARCHAR(4), @CONTADOR) + ' = B' + CONVERT(VARCHAR(4), @CONTADOR) + '.NOME_FUNC' + CHAR(13)

	SET @JOINS_QUERY_TABELA = 'LEFT JOIN DBO.TMP_TESTE_RECURSIVO B' + CONVERT(VARCHAR(4), @CONTADOR) 
	SET @JOINS_QUERY_TABELA = @JOINS_QUERY_TABELA + ' ON B' + CONVERT(VARCHAR(4), @CONTADOR - 1) + '.ID_CHEFE = B' + CONVERT(VARCHAR(4), @CONTADOR) + '.ID_FUNC' + CHAR(13)

	SET @CONDICAO_QUERY_ANTERIOR = @CONDICAO_QUERY
	SET @CONDICAO_QUERY = 'WHERE B' + CONVERT(VARCHAR(4), @CONTADOR) + '.ID_FUNC IS NOT NULL'


	SET @QUERY = REPLACE(@QUERY, 'FROM', @CAMPOS_QUERY_TABELA + 'FROM')
	SET @QUERY = REPLACE(@QUERY, 'WHERE', @JOINS_QUERY_TABELA + 'WHERE')

	SET @QUERY = REPLACE(@QUERY, @CONDICAO_QUERY_ANTERIOR, @CONDICAO_QUERY)

	PRINT @QUERY

	--SQL Dinâmico para identificar se o join retorna algo
	SET @QUERYDYNAMIC = 'SELECT @RETORNO = CASE WHEN EXISTS (' + @QUERY + ') THEN 1 ELSE 0 END' + CHAR(13)	
	SET @DYNAMICPARAMDEC = '@RETORNO VARCHAR(MAX) OUTPUT'		

	--PRINT @QUERY	
	EXECUTE SP_EXECUTESQL
			@QUERYDYNAMIC  
			,@DYNAMICPARAMDEC
			,@RETORNO  OUTPUT
			
	PRINT 'XX' + CHAR(13)

END


SET @QUERY = REPLACE(@QUERY, @CAMPOS_QUERY_TABELA, '')
SET @QUERY = REPLACE(@QUERY, @JOINS_QUERY_TABELA, '')
SET @QUERY = REPLACE(@QUERY, @CONDICAO_QUERY, '')

SET @QUERY = @QUERY + 'ORDER BY 1'


PRINT @QUERY

EXEC(@QUERY)

		
