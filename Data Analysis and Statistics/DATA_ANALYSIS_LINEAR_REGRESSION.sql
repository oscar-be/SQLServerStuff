CREATE PROCEDURE [dbo].[DATA_ANALYSIS_LINEAR_REGRESSION]	
	 @TABLE_NAME		VARCHAR(MAX)
	,@X_COLUMNS	VARCHAR(MAX)		 --Must be sent with commas separating each column
	,@Y_COLUMN	VARCHAR(MAX)		 
AS

--Developed by oscar_b Nov/2024
/*
--Creating a table for Tests
DROP TABLE IF EXISTS ##LINEAR_REGRESSION_TEST

SELECT *
	INTO ##LINEAR_REGRESSION_TEST
	FROM (VALUES (5, 17, 40), (7, 4, 120), (12, 11, 180), (16, 13, 210), (20, 5, 240)
--	FROM (VALUES (139, 0.115, 122),(126, 0.12, 114),(90, 0.105, 86),(144, 0.09, 134),(163, 0.1, 146),(136, 0.12, 107),(61, 0.105, 68),(62, 0.08, 117),(41, 0.1, 71),(120, 0.115, 98)
	) A(COL1, COL2, COL3)

--Example of Procedure Execution:
EXEC dbo.DATA_ANALYSIS_LINEAR_REGRESSION
	 @TABLE_NAME	= '##LINEAR_REGRESSION_TEST'
	,@X_COLUMNS		= 'COL1, COL2'
	,@Y_COLUMN		= 'COL3'
*/

--Variables
DECLARE  @QUERY					NVARCHAR(MAX)
		,@X_COLUMNS_SELECT		NVARCHAR(MAX)
		,@X_COLUMNS_INSERT		NVARCHAR(MAX)
		,@TMP_TABLE1			NVARCHAR(MAX)
		,@X0_COEFFICIENT		FLOAT
		,@X1_COEFFICIENT		FLOAT
		,@X2_COEFFICIENT		FLOAT
		,@REGRESSION_FORMULA	NVARCHAR(MAX)
		,@R_SQUARED				FLOAT
		,@R_SQUARED_ADJUSTED	FLOAT
		,@N						INT
		,@P						INT
		,@ERROR_MESSAGE			NVARCHAR(MAX)


--Set Number of X_Columns
SET @P = 1 + LEN(@X_COLUMNS) - LEN(REPLACE(@X_COLUMNS, ',', ''))

IF @P >= 3
BEGIN
	SET @ERROR_MESSAGE =
	'By now, this procedure cannot accept more than 2 parameters as X values.
I intend to implement this feature later. Sorry for the inconvenience.'
	RAISERROR(@ERROR_MESSAGE, 11,1)
	RETURN
END


--Create Tables Used in the Process
DROP TABLE IF EXISTS #LINEAR_REGRESSION_PT1
DROP TABLE IF EXISTS #LINEAR_REGRESSION_PT2
DROP TABLE IF EXISTS #LINEAR_REGRESSION_FINAL


--Intermediate table with values (used in the loop)
CREATE TABLE #LINEAR_REGRESSION_PT1 (
	 ID_ROW				INT IDENTITY
	,Y_NAME				VARCHAR(MAX)
	,Y_VALUE			FLOAT
	,RESIDUALS			FLOAT
	,X1_NAME			VARCHAR(MAX)
	,X1_VALUE			FLOAT
	,X2_NAME			VARCHAR(MAX)
	,X2_VALUE			FLOAT
)


--Final table
CREATE TABLE #LINEAR_REGRESSION_FINAL (
	 DESCRIPTION_ORDER	INT
	,DESCRIPTION		NVARCHAR(MAX)
	,VALUE				NVARCHAR(MAX)
)


--Create x column of select
SET @X_COLUMNS_SELECT =
(SELECT CONCAT(',X', ORDINAL, '_NAME = ''', TRIM(A.VALUE), ''', X', ORDINAL, '_VALUE = ', TRIM(A.VALUE)) 
	FROM STRING_SPLIT(@X_COLUMNS, ',', 1) A
	FOR XML PATH(''))
SET @X_COLUMNS_SELECT = STUFF(@X_COLUMNS_SELECT, 1, 1, '')


--Create x column of Insert
SET @X_COLUMNS_INSERT =
(SELECT CONCAT(',X', ORDINAL, '_NAME, X', ORDINAL, '_VALUE') 
	FROM STRING_SPLIT(@X_COLUMNS, ',', 1) A
	FOR XML PATH(''))
SET @X_COLUMNS_INSERT = STUFF(@X_COLUMNS_INSERT, 1, 1, '')

--====================================
--Calculation of linear Regression
--====================================
--Set Query that populates the first table
SET @QUERY = 
'INSERT INTO #LINEAR_REGRESSION_PT1
(Y_NAME, Y_VALUE, [#X_COLUMNS_INSERT])
SELECT *
	FROM
	(SELECT
		 Y_NAME		= ''[#Y_COLUMN]''
		,Y_VALUE	= [#Y_COLUMN]
		,[#X_COLUMNS]
		FROM [#TABLE_NAME]) A '

SET @QUERY = REPLACE(@QUERY, '[#TABLE_NAME]'		, @TABLE_NAME)
SET @QUERY = REPLACE(@QUERY, '[#X_COLUMNS]'			, @X_COLUMNS_SELECT)
SET @QUERY = REPLACE(@QUERY, '[#X_COLUMNS_INSERT]'	, @X_COLUMNS_INSERT)
SET @QUERY = REPLACE(@QUERY, '[#Y_COLUMN]'			, @Y_COLUMN)


PRINT @QUERY
EXEC(@QUERY)

--Set Number of Rows int the table
SET @N = @@ROWCOUNT	

--Part2
SELECT *
	,X1_VALUE - AVG(X1_VALUE) OVER()				AS X1_MINUS_AVG
	,X2_VALUE - AVG(X2_VALUE) OVER()				AS X2_MINUS_AVG
	,Y_VALUE  - AVG(Y_VALUE)  OVER()				AS  Y_MINUS_AVG
	,POWER(X1_VALUE - AVG(X1_VALUE) OVER(), 2)		AS X1_MINUS_AVG_POWER
	,POWER(X2_VALUE - AVG(X2_VALUE) OVER(), 2)		AS X2_MINUS_AVG_POWER
	,POWER( Y_VALUE - AVG(Y_VALUE)  OVER(), 2)		AS  Y_MINUS_AVG_POWER
	,  (X1_VALUE - AVG(X1_VALUE) OVER())
	 * (Y_VALUE  - AVG(Y_VALUE)  OVER())			AS X1_MA_MINUS_Y_MA
	,  (X2_VALUE - AVG(X2_VALUE) OVER())
	 * (Y_VALUE  - AVG(Y_VALUE)  OVER())			AS X2_MA_MINUS_Y_MA
	,  (X1_VALUE - AVG(X1_VALUE) OVER())
	 * (X2_VALUE - AVG(X2_VALUE) OVER())			AS X1_MA_MULT_X2_MA
	INTO #LINEAR_REGRESSION_PT2
	FROM #LINEAR_REGRESSION_PT1

IF @P = 1
BEGIN
--Set X1 Coefficient
SELECT 
	 @X1_COEFFICIENT =
	 SUM(X1_MA_MINUS_Y_MA) * 1.0 / SUM(X1_MINUS_AVG_POWER)
	FROM #LINEAR_REGRESSION_PT2

--Set X0 Coefficient
SELECT 
	 @X0_COEFFICIENT =
	1.0 * (AVG(Y_VALUE) - (@X1_COEFFICIENT * AVG(X1_VALUE)))
	FROM #LINEAR_REGRESSION_PT1

--Set text with regression Formula
SELECT 
	@REGRESSION_FORMULA = 
	CONCAT(Y_NAME, '^ = ', @X0_COEFFICIENT, ' + ('
		  ,@X1_COEFFICIENT, ' * ', X1_NAME, ')'
		  )
FROM (SELECT Y_NAME  = MAX(Y_NAME)
			,X1_NAME = MAX(X1_NAME)
			 FROM #LINEAR_REGRESSION_PT1) A

--Update Residuals
UPDATE A
	SET A.RESIDUALS =
	A.Y_VALUE - (@X0_COEFFICIENT + (@X1_COEFFICIENT * A.X1_VALUE)) 
	FROM #LINEAR_REGRESSION_PT1 A

END

IF @P = 2
BEGIN
--Set X1 and X2 Coefficients
SELECT 
	 @X1_COEFFICIENT =
	 (
	 		(SUM(X2_MINUS_AVG_POWER) * SUM(X1_MA_MINUS_Y_MA))
	 	-	(SUM(X2_MA_MINUS_Y_MA) * SUM(X1_MA_MULT_X2_MA))
	 ) * 1.0 /
	 ( 	
	 		(SUM(X1_MINUS_AVG_POWER) * SUM(X2_MINUS_AVG_POWER))
	 	-	POWER(SUM(X1_MA_MULT_X2_MA), 2)
	 )
	,@X2_COEFFICIENT = 
	 (
	 		(SUM(X1_MINUS_AVG_POWER) * SUM(X2_MA_MINUS_Y_MA))
	   -	(SUM(X1_MA_MINUS_Y_MA) * SUM(X1_MA_MULT_X2_MA))
	 ) * 1.0 /
	 ( 	
			(SUM(X1_MINUS_AVG_POWER) * SUM(X2_MINUS_AVG_POWER))
	  -		POWER(SUM(X1_MA_MULT_X2_MA), 2)
	 )
	FROM #LINEAR_REGRESSION_PT2

--Set X0 Coefficient
SELECT 
	 @X0_COEFFICIENT =
	1.0 * (AVG(Y_VALUE) - ((@X1_COEFFICIENT * AVG(X1_VALUE)) + (@X2_COEFFICIENT * AVG(X2_VALUE))))
	FROM #LINEAR_REGRESSION_PT1


--Set text with regression Formula
SELECT 
	@REGRESSION_FORMULA = 
	CONCAT(Y_NAME, '^ = ', @X0_COEFFICIENT, ' + ('
		  ,@X1_COEFFICIENT, ' * ', X1_NAME, ') + ('
		  ,@X2_COEFFICIENT, ' * ', X2_NAME, ')'
		  )
FROM (SELECT Y_NAME  = MAX(Y_NAME)
			,X1_NAME = MAX(X1_NAME)
			,X2_NAME = MAX(X2_NAME)
			 FROM #LINEAR_REGRESSION_PT1) A


--Update Residuals
UPDATE A
	SET A.RESIDUALS =
	A.Y_VALUE - (@X0_COEFFICIENT + (@X1_COEFFICIENT * A.X1_VALUE) + (@X2_COEFFICIENT * A.X2_VALUE)) 
	FROM #LINEAR_REGRESSION_PT1 A

END



--Set R Squared
SELECT @R_SQUARED = 
	1 - (SUM(POWER(A.RESIDUALS, 2)) / SUM(B.Y_MINUS_AVG_POWER))
	FROM #LINEAR_REGRESSION_PT1 A
	INNER JOIN #LINEAR_REGRESSION_PT2 B ON A.ID_ROW = B.ID_ROW

--Set R Squared Adjusted
SELECT @R_SQUARED_ADJUSTED = 
	1 - (((1 - @R_SQUARED) * (@N - 1)) / (@N - @P - 1))
	FROM #LINEAR_REGRESSION_PT1 A
	INNER JOIN #LINEAR_REGRESSION_PT2 B ON A.ID_ROW = B.ID_ROW


--Final Table
INSERT INTO #LINEAR_REGRESSION_FINAL
(DESCRIPTION_ORDER, DESCRIPTION, [VALUE])
		  SELECT 1, 'Linear Regression Formula'  , CONVERT(NVARCHAR(MAX), @REGRESSION_FORMULA)
UNION ALL SELECT 2, 'X0 Coefficient'			 , CONVERT(NVARCHAR(MAX), @X0_COEFFICIENT	 )
UNION ALL SELECT 3, 'X1 Coefficient'			 , CONVERT(NVARCHAR(MAX), @X1_COEFFICIENT	 )
UNION ALL SELECT 4, 'X2 Coefficient'			 , CONVERT(NVARCHAR(MAX), @X2_COEFFICIENT	 )
UNION ALL SELECT 5, 'R Squared'					 , CONVERT(NVARCHAR(MAX), @R_SQUARED		 )
UNION ALL SELECT 6, 'R Squared Adjusted'		 , CONVERT(NVARCHAR(MAX), @R_SQUARED_ADJUSTED)
UNION ALL SELECT 7, 'Observations'				 , CONVERT(NVARCHAR(MAX), @N				 )

--Final Output
SELECT DESCRIPTION AS [_], VALUE
	FROM #LINEAR_REGRESSION_FINAL
	WHERE VALUE IS NOT NULL
	ORDER BY DESCRIPTION_ORDER


--Drop Tables Used in the Process
DROP TABLE IF EXISTS #LINEAR_REGRESSION_PT1
DROP TABLE IF EXISTS #LINEAR_REGRESSION_PT2
DROP TABLE IF EXISTS #LINEAR_REGRESSION_FINAL
