CREATE PROCEDURE [DBO].[DATA_ANALYSIS_CORRELATION]	
 @CORRELATION_TYPE  VARCHAR(MAX) = 'PARAMETRIC'
,@TABLE_NAME		VARCHAR(MAX)
,@COLUMN_NAMES		VARCHAR(MAX)		 --Must be sent with commas separating each column
AS

--Developed by oscar_b Nov/2024
/*
--================
Testing the Procedure:
--================

--Creating a table for Tests
DROP TABLE IF EXISTS ##TEST_CORRELATION

SELECT 
	 ABS(CHECKSUM(NEWID())) % 20 COLX
	,ABS(CHECKSUM(NEWID())) % 20 COLY
	,ABS(CHECKSUM(NEWID())) % 20 COLW
	,ABS(CHECKSUM(NEWID())) % 20 COLZ
	INTO ##TEST_CORRELATION
	FROM STRING_SPLIT(REPLICATE(';', 19), ';')


--Example of Procedure Execution:
EXEC DBO.DATA_ANALYSIS_CORRELATION
	 @CORRELATION_TYPE = 'PARAMETRIC'
	,@TABLE_NAME	= '##TEST_CORRELATION'
	,@COLUMN_NAMES	= 'COLX, COLY, COLZ, COLW'

--Example of Procedure Execution:
EXEC DBO.DATA_ANALYSIS_CORRELATION
	 @CORRELATION_TYPE = 'NONPARAMETRIC'
	,@TABLE_NAME	= '##TEST_CORRELATION'
	,@COLUMN_NAMES	= 'COLX, COLY, COLZ, COLW'
*/

--Variables used in the process
DECLARE  @QUERY				VARCHAR(MAX)
		,@QUERY_LOOP		VARCHAR(MAX)
		,@COL1_NAME_LOOP	VARCHAR(MAX)
		,@COL2_NAME_LOOP	VARCHAR(MAX)
		,@COL1_VALUE_LOOP	FLOAT
		,@COL2_VALUE_LOOP	FLOAT
		,@COL1_AVG_LOOP		FLOAT
		,@COL2_AVG_LOOP		FLOAT
		,@CORRELATION_LOOP	FLOAT
		,@COLS_AUX_PIVOT	VARCHAR(MAX)
		,@ERROR_MESSAGE		VARCHAR(MAX)
		,@CORRELATION_NAME  VARCHAR(MAX)

SET @CORRELATION_TYPE = COALESCE(@CORRELATION_TYPE, 'PARAMETRIC')

SET @CORRELATION_NAME =
	CASE WHEN @CORRELATION_TYPE = 'PARAMETRIC'		THEN 'Pearson Correlation Coefficient'
		 WHEN @CORRELATION_TYPE = 'NONPARAMETRIC'	THEN 'Spearman Rank Correlation Coefficient'
		 END

--Check if the Correlation Type Value sent is correct
IF @CORRELATION_TYPE NOT IN ('PARAMETRIC', 'NONPARAMETRIC')
BEGIN
	SET @ERROR_MESSAGE = 'Invalid Parameter to CORRELATION_TYPE. It must be ''PARAMETRIC'' or ''NONPARAMETRIC''.'
	RAISERROR(@ERROR_MESSAGE, 11,1)
	RETURN
END


SET @QUERY = 'SELECT [#COLUMN_NAMES] FROM [#TABLE_NAME]'
SET @QUERY = REPLACE(@QUERY, '[#COLUMN_NAMES]'	, @COLUMN_NAMES)
SET @QUERY = REPLACE(@QUERY, '[#TABLE_NAME]'	, @TABLE_NAME)


DROP TABLE IF EXISTS #LOOP_VALUES
DROP TABLE IF EXISTS #CORRELATION_FINAL


--==============================================
--Part 1: Creating tables used in the process
--==============================================
--Final table with the Correlations (correlation are going to be imputed later)
BEGIN
WITH CTE_COLUMNS AS (
SELECT
	 ORDINAL
	,TRIM(VALUE) AS COLUMN_NAME
	FROM STRING_SPLIT(@COLUMN_NAMES, ',', 1)
)
SELECT DISTINCT 
	 COL1 = A.COLUMN_NAME
	,COL2 = B.COLUMN_NAME
	,CORRELATION	  = CONVERT(FLOAT, CASE WHEN A.COLUMN_NAME = B.COLUMN_NAME THEN 1 ELSE NULL END)
	,CORRELATION_TEXT = CONVERT(VARCHAR(MAX), NULL)
	INTO #CORRELATION_FINAL
	FROM CTE_COLUMNS A
	CROSS APPLY(SELECT * FROM CTE_COLUMNS) B
	ORDER BY COL1, COL2
END


--Intermediate table with values (used in the loop)
CREATE TABLE #LOOP_VALUES (
	 ID_ROW		INT IDENTITY
	,COL1_NAME	VARCHAR(MAX)
	,COL2_NAME	VARCHAR(MAX)
	,COL1_VALUE FLOAT
	,COL2_VALUE FLOAT
)

--==============================================
--Part 2: Calculates Correlation for each combination
--==============================================

--Create table with columns and values


--Cursor for each row
DECLARE CURSOR_COLUMNS CURSOR FOR
SELECT COL1, COL2
	FROM  #CORRELATION_FINAL
	WHERE CORRELATION IS NULL

--Opening Cursor
OPEN CURSOR_COLUMNS

--Reading Next Line
FETCH NEXT FROM CURSOR_COLUMNS INTO @COL1_NAME_LOOP, @COL2_NAME_LOOP

--Going each row of the cursor
WHILE @@FETCH_STATUS = 0
BEGIN


TRUNCATE TABLE #LOOP_VALUES
SET @CORRELATION_LOOP = NULL

--Don't go ahead if the correlation where already calculated
IF EXISTS (SELECT *
			FROM #CORRELATION_FINAL
			WHERE (	 COL1 = @COL1_NAME_LOOP AND COL2 = @COL2_NAME_LOOP
				  OR COL1 = @COL2_NAME_LOOP AND COL2 = @COL1_NAME_LOOP
				  )
				  AND CORRELATION IS NOT NULL
		   )
BEGIN
	CONTINUE
END

--Insert values on Loop table
SET @QUERY_LOOP =
'
INSERT INTO #LOOP_VALUES
(COL1_NAME, COL2_NAME, COL1_VALUE, COL2_VALUE)
SELECT
	 ''[#COL1_NAME_LOOP]''
	,''[#COL2_NAME_LOOP]''
	,[#COL1_NAME_LOOP]
	,[#COL2_NAME_LOOP]
	FROM [#TABLE_NAME]
'
SET @QUERY_LOOP = REPLACE(@QUERY_LOOP, '[#COL1_NAME_LOOP]', @COL1_NAME_LOOP)
SET @QUERY_LOOP = REPLACE(@QUERY_LOOP, '[#COL2_NAME_LOOP]', @COL2_NAME_LOOP)
SET @QUERY_LOOP = REPLACE(@QUERY_LOOP, '[#TABLE_NAME]'	  , @TABLE_NAME)

EXEC(@QUERY_LOOP)


--Calculates if the correlation is parametric
IF @CORRELATION_TYPE = 'PARAMETRIC'
BEGIN
	--Gets the Average value for each column
	SELECT
		 @COL1_AVG_LOOP = AVG(COL1_VALUE * 1.0) 
		,@COL2_AVG_LOOP = AVG(COL2_VALUE * 1.0) 
		FROM #LOOP_VALUES

	SELECT	@CORRELATION_LOOP =
				 SUM((COL1_VALUE - @COL1_AVG_LOOP) * (COL2_VALUE - @COL2_AVG_LOOP))
		  / SQRT(SUM(POWER(COL1_VALUE - @COL1_AVG_LOOP, 2)) * SUM(POWER(COL2_VALUE - @COL2_AVG_LOOP, 2)))
		FROM #LOOP_VALUES

END

--Calculates if the correlation is Non-Parametric
IF @CORRELATION_TYPE = 'NONPARAMETRIC'

--TODO: Implementar versão com empates no Ranking (Há diferença na fórmula)
BEGIN
	--Create an auxiliar table with the Fractional ranks
	WITH CTE_SPEARMAN_PT1 AS (
	SELECT *
		,RANK()		  OVER(ORDER BY COL1_VALUE)		AS COL1_RANK
		,ROW_NUMBER() OVER(ORDER BY COL1_VALUE)		AS COL1_RANK_SEQ
		,RANK()		  OVER(ORDER BY COL2_VALUE)		AS COL2_RANK
		,ROW_NUMBER() OVER(ORDER BY COL2_VALUE)		AS COL2_RANK_SEQ

		FROM #LOOP_VALUES
	)
	SELECT 
		 ID_ROW
		,COL1_NAME
		,COL2_NAME
		,COL1_VALUE
		,COL2_VALUE
		,SUM(COL1_RANK_SEQ * 1.0) OVER(PARTITION BY COL1_VALUE)
			/ COUNT(COL1_RANK) OVER(PARTITION BY COL1_VALUE)		COL1_RANK_FRAC
		,SUM(COL2_RANK_SEQ * 1.0) OVER(PARTITION BY COL2_VALUE)
			/ COUNT(COL2_RANK) OVER(PARTITION BY COL2_VALUE)		COL2_RANK_FRAC
		INTO #AUX_SPEARMAN
		FROM CTE_SPEARMAN_PT1

	--Gets the Average value for each rank
	SELECT
		 @COL1_AVG_LOOP = AVG(COL1_RANK_FRAC * 1.0) 
		,@COL2_AVG_LOOP = AVG(COL2_RANK_FRAC * 1.0) 
		FROM #AUX_SPEARMAN
	
	--Calculates de correlation
	SELECT	@CORRELATION_LOOP =
				 SUM((COL1_RANK_FRAC - @COL1_AVG_LOOP) * (COL2_RANK_FRAC - @COL2_AVG_LOOP))
		  / SQRT(SUM(POWER(COL1_RANK_FRAC - @COL1_AVG_LOOP, 2)) * SUM(POWER(COL2_RANK_FRAC - @COL2_AVG_LOOP, 2)))
		FROM #AUX_SPEARMAN

	--Drop the auxiliar table
	DROP TABLE IF EXISTS #AUX_SPEARMAN

END


UPDATE #CORRELATION_FINAL
	SET CORRELATION		 = @CORRELATION_LOOP
	   ,CORRELATION_TEXT = CASE WHEN @CORRELATION_LOOP = 1.0	THEN 'Perfect Positive Correlation'
								WHEN @CORRELATION_LOOP >= 0.9	THEN 'High Positive Correlation'
								WHEN @CORRELATION_LOOP >= 0.5	THEN 'Moderate Positive Correlation'
								WHEN @CORRELATION_LOOP >= 0.5	THEN 'Moderate Positive Correlation'
								WHEN @CORRELATION_LOOP >= 0.3	THEN 'Weak Positive Correlation'
								WHEN @CORRELATION_LOOP >  0		THEN 'Non-significant Positive Correlation'
								WHEN @CORRELATION_LOOP = -1.0	THEN 'Perfect Negative Correlation'
								WHEN @CORRELATION_LOOP <= -0.9	THEN 'High Negative Correlation'
								WHEN @CORRELATION_LOOP <= -0.5	THEN 'Moderate Negative Correlation'
								WHEN @CORRELATION_LOOP <= -0.3	THEN 'Weak Negative Correlation'
								WHEN @CORRELATION_LOOP <  0		THEN 'Non-significant Negative Correlation'
								WHEN @CORRELATION_LOOP =  0		THEN 'No Correlation'
								ELSE NULL
								END
	WHERE (	 COL1 = @COL1_NAME_LOOP AND COL2 = @COL2_NAME_LOOP
		  OR COL1 = @COL2_NAME_LOOP AND COL2 = @COL1_NAME_LOOP
		  )
--PRINT @CORRELATION_LOOP


--Reading Next Line
FETCH NEXT FROM CURSOR_COLUMNS INTO @COL1_NAME_LOOP, @COL2_NAME_LOOP
END

--Closing Cursor for read
CLOSE CURSOR_COLUMNS

--Closing Cursor
DEALLOCATE CURSOR_COLUMNS



--==============================================
--Part 3: Final Output
--==============================================


--Final Output - Numbers
SELECT @COLS_AUX_PIVOT = STRING_AGG(COL, ',') FROM (
SELECT DISTINCT CONCAT('[', COL2, ']') AS COL
	FROM #CORRELATION_FINAL
	) A
SET @QUERY = '
SELECT 
	 ''[#CORRELATION_NAME]''		AS CALCULATION
	,COL1 AS [_]
	,[#COLS_FINAL_OUTPUT] 
	FROM (SELECT COL1, COL2, CORRELATION FROM #CORRELATION_FINAL) A
	PIVOT(MAX(CORRELATION) FOR COL2 IN ([#COLS_FINAL_OUTPUT])) A '
SET @QUERY = REPLACE(@QUERY, '[#CORRELATION_NAME]', @CORRELATION_NAME)
SET @QUERY = REPLACE(@QUERY, '[#COLS_FINAL_OUTPUT]', @COLS_AUX_PIVOT)
EXEC (@QUERY)

--Final Output - Text
SET @QUERY = '
SELECT 
	 ''[#CORRELATION_NAME]''		AS CALCULATION
	,COL1 AS [_]
	,[#COLS_FINAL_OUTPUT] 
	FROM (SELECT COL1, COL2, CORRELATION_TEXT FROM #CORRELATION_FINAL) A
	PIVOT(MAX(CORRELATION_TEXT) FOR COL2 IN ([#COLS_FINAL_OUTPUT])) A '
SET @QUERY = REPLACE(@QUERY, '[#CORRELATION_NAME]', @CORRELATION_NAME)
SET @QUERY = REPLACE(@QUERY, '[#COLS_FINAL_OUTPUT]', @COLS_AUX_PIVOT)
EXEC (@QUERY)


--Remove Tables
--DROP TABLE IF EXISTS #LOOP_VALUES
--DROP TABLE IF EXISTS #CORRELATION_FINAL
--DROP TABLE IF EXISTS #AUX_SPEARMAN

	
